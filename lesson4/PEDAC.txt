# PROBLEM:

# Given a string, write a method `palindrome_substrings` which returns
# all the substrings from a given string which are palindromes. Consider
# palindrome words case sensitive.

# Test cases:

# palindrome_substrings("supercalifragilisticexpialidocious") == ["ili"]
# palindrome_substrings("abcddcbA") == ["bcddcb", "cddc", "dd"]
# palindrome_substrings("palindrome") == []
# palindrome_substrings("") == []
some questions:
what is a substring?
Will inputs always be strings with no space?

Input: string
output: new array
rules:
  every palindrome in the string must be added to the array
  it is case sensitive

def palindrome_substrings(str)
  result = []
  substrings_arr = substrings(str)
  substrings_arr.each do |substring|
    result << substring if is_palindrome?(substirng)
  end
  result
end

psuedo example

START

  /* Given a string named 'string' */

  SET result = []
  SET starting_index = 0

  WHILE starting_index <= length of the string -2
    SET numChars = 2
    WHILE numChars <= length of string - starting index
      SET substring = num_chars characters from string starting at index starting_index
      append substring to result array
      SET num_chars += 1

    SET starting_index += 1

  RETURN result

END


=begin
- Understanding the Problem
  - Goal: understand what you're being asked to do
  - Establish to rules/define the boundaries of the problem
  - What are the explicit and implicit requirements?
  - Ask clarifying questions (& check test cases)

- Examples and Test Cases
  - Goal: understand more about what you're being asked to do
  - Use these to confirm or refute assumptions
  - A good way to see the rules/boundaries but in actual code

- Data Structures
  - Goal: begin to think logically and solution-based about the problem
  - How we structure our data is closely related to our algorithm/how we want to go about solving our problem
  - Helps us reason with data more logically
  - What does our data look like when we get it? (input)
  - What does our data look like when we return it? (output?)
  - What does our data need to look like in between, or will it be the same?

- Algorithms
  - Goal: write out high level steps to solve the given problem
  - A logical sequence of steps for accomplishing a task or objective
  - Be abstract and high level (don't box yourself in)
  - You are programming-language-agnostic right now
  - Find a solution that works (don't worry about efficiency for now)
  - Can create substeps for different parts
  - Can even separate concerns into a helper method
  - You can (and should) return to your algorithm during the implementation stage to update

- Implementing a Solution in Code
  - Goal: translate the algorithm into your programming language of choice (Ruby)
  - Now is the time to use pseudo code (if you want) to act as a step between the algorithm and actual code
  - Goal of Pseudo Code: to explore the solution in the programming language
  - Then: follow the algorithm and code the solution
  - If you find that your algorithm doesn't work, return there FIRST and THEN fix your code
  - Good programmers often spend the least amount of time in this step, because they figured everything out in the other steps

- * Test frequently

=end

=begin
  set an empty string as temp number string
  set an empty array for collection of integers
  iterate through each character of the string
  verify if it's a number
  add to empty string if it's a number
  if it's not a number, verify if temp number string is empty
  if temp number string is not empty
  add to the collection array
  set temp number string to empty string again
  convert the strings in collection arrays into numbers
  sum the numbers
=end

